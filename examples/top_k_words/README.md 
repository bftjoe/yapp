## top_k_words

This example leverages the power of a parallel pipeline to perform a very typical processing task: Given a text file and a postive integer number `K`, return the K most frequent words in that text.

The process is modelled as a parallel pipeline with the following steps:

1. Read the input file line by line
2. Break each line into a list of words
3. Place each word into a hash table mapping the word to its frequency
4. Use the newly discovered words to update a K-top list of words
5. Collect the K-top list 


